;1. trace

(load "trace-ex.scm")

(define (zip . xss)
  (if (or (null? xss)
          (null? (trace-ex (car xss)))) ; Здесь...
      '()
      (cons (map car xss)
            (apply zip (map cdr (trace-ex xss)))))) ; ... и здесь

(zip '(1 2 3) '(one two three))
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
;2. unit-test

; Пример процедуры с ошибкой
; 
(define (signum x)
  (cond
    ((< x 0) -1)
    ((= x 0)  1) ; Ошибка здесь!
    (else     1)))

; Загружаем каркас
;
(load "unit-test.scm")

; Определяем список тестов
;
(define the-tests
  (list (test (signum -2) -1)
        (test (signum  0)  0)
        (test (signum  2)  1)))

; Выполняем тесты
;
(run-tests the-tests)
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
;3. доступ к произвольному элементу
;

(define (ref xs x)
  (define (help xs x n)
    (if (null? xs) #f
        (if (list? xs)
            (if (equal? x n)
                (write (car xs))
                (help (cdr xs) x (+ 1 n)))
            (if (vector? xs)
                (help (vector->list xs) x 0))
            (if (string? xs)
                (help (string->list xs) x 0)))))
  (helper xs x 0))

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;

(define (ref expr x y)
  (cond ((list? expr)
         (if (and (>= x 0) (< x (+ (length expr) 1)))
             (if (= x 0)
                 (append (list y) expr)
                 (cons (car expr) (ref (cdr expr) (- x 1) y))) (= 2 3)))
        ((vector? expr)
         (if (and (>= x 0) (< x (+ (vector-length expr) 1)))
             (if (= x 0)
                 (list->vector (append (list y) (vector->list expr)))
                 (list->vector (append (list (car (vector->list expr))) (ref (cdr (vector->list expr)) (- x 1) y)))) (= 2 3)))
        ((string? expr)
         (if (and (char? y) (>= x 0) (< x (+ (string-length expr) 1)))
             (if (= x 0)
                 (list->string (append
                                (list y) (string->list expr)))
                 (list->string (append (list (car (string->list expr))) (ref (cdr (string->list expr)) (- x 1) y)))) (= 2 3)))))

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

;4

(define factorize-tests (list
                         (test (factorize '(- (expt 4 2) (expt 22 2))) (* (- 4 22) (+ 4 22)))
                         (test (factorize '(+ (expt 5 2) (expt 6 2))) (* (+ 5 6) (+ 6 5)))
                         (test (factorize '(- (expt a 2) (expt b 2))) (* (- a b) (+ a b)))
                         (test (factorize '(- (expt c 2) (expt 31 2))) (* (- c 31) (+ c 31)))
                         (test (factorize '(- (expt (+ a 11) 2) (expt (* a 19) 2))) (* (- (+ a 11) (* a 19)) (+ (+ a 11) (* a 19))))

                         (test (factorize '(- (expt 4 3) (expt 22 3))) (* (- 4 22) (+ (expt 4 2) (* 4 22) (expt 22 2))))
                         (test (factorize '(- (expt a 3) (expt b 3))) (* (- a b) (+ (expt a 2) (* a b) (expt b 2))))
                         (test (factorize '(- (expt c 3) (expt 31 3))) (* (- c 31) (+ (expt c 2) (* c 31) (expt 31 2))))
                         (test (factorize '(- (expt (+ a 11) 3) (expt (* a 19) 3))) (* (- (+ a 11) (* a 19)) (+ (expt (+ a 11) 2) (* (+ a 11) (* a 19)) (expt (* a 19) 2))))

                         (test (factorize '(+ (expt 4 3) (expt 22 3))) (* (+ 4 22) (+ (expt 4 2) (- (* 4 22)) (expt 22 2))))
                         (test (factorize '(+ (expt a 3) (expt b 3))) (* (+ a b) (+ (expt a 2) (- (* a b)) (expt b 2))))
                         (test (factorize '(+ (expt c 3) (expt 31 3))) (* (+ c 31) (+ (expt c 2) (- (* c 31)) (expt 31 2))))
                         (test (factorize '(+ (expt (+ a 11) 3) (expt (* a 19) 3))) (* (+ (+ a 11) (* a 19))
                                                                                       (+ (expt (+ a 11) 2) (- (* (+ a 11) (* a 19))) (expt (* a 19) 2))))))
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
(define derivative-tests (list
                          (test (derivative 2) 0)
                          (test (derivative x) 1)
                          (test (derivative (* 2 x)) 2)
                          (test (derivative '(* 11 x)) 11)
                          (test (derivative '(* 15 (expt x 2))) (* 30 x))
                          (test (derivative '(* 3 (expt x 7))) (* 21 (expt x 6)))
                          (test (derivative '(cos x)) (- (sin x)))
                          (test (derivative '(sin x)) (cos x))
                          (test (derivative '(* 17 (cos x))) (* -17 (sin x)))
                          (test (derivative '(sin (expt x 2))) (* 2 x (cos (expt x 2))))
                          (test (derivative '(exp x)) (exp x))
                          (test (derivative '(* 4(log x))) (/ 4 x))
                          (test (derivative '(/ 4 (expt x 3))) (/ -12 (expt x 4)))
                          (test (derivative '(+ (expt (x 5) - (* 2 (sin x))))) (- (* 5 (expt x 4)) (* 2 (cos x))))))